org: raferdev
app: customer-microservice
service: customer-microservice
frameworkVersion: "3"

plugins:
  - serverless-dynamodb-local
  - serverless-esbuild
  - serverless-offline

custom:
  tableName: "customers-table-${sls:stage}"
  dynamodb:
    start:
      migrate: true

provider:
  name: aws
  runtime: nodejs20.x
  memorySize: 512
  timeout: 10
  logRetentionInDays: 90
  logs:
    httpApi: true
    restApi:
      accessLogging: true
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [CustomersTable, Arn]
  environment:
    CUSTOMERS_TABLE: ${self:custom.tableName}

functions:
  list:
    handler: src/handler.handler
    events:
      - http: "GET /v1/customers"
  getCustomer:
    handler: src/handler.handler
    events:
      - http: "GET /v1/customers/{proxy+}"
  putCustomer:
    handler: src/handler.handler
    events:
      - http: "PUT /v1/customers"
  deleteCustomer:
    handler: src/handler.handler
    events:
      - http: "DELETE /v1/customers/{proxy+}"
  search:
    handler: src/handler.handler
    events:
      - http: "GET /v1/search/{proxy+}"

resources:
  Resources:
    CustomersTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: customerID
            AttributeType: S
          - AttributeName: name
            AttributeType: S
          - AttributeName: email
            AttributeType: S
          - AttributeName: phone
            AttributeType: S
          - AttributeName: address
            AttributeType: S
        KeySchema:
          - AttributeName: customerID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
